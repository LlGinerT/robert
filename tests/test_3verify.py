#!/usr/bin/env python

######################################################.
# 	        Testing VERIFY with pytest 	             #
######################################################.

import os
import glob
import pytest
import shutil
import subprocess
from pathlib import Path

# saves the working directory
path_main = os.getcwd()
path_verify = path_main + "/VERIFY"

# VERIFY tests
@pytest.mark.parametrize(
    "test_job",
    [
        # (
        #     "clas"
        # ),  # test for clasification
        (
            "standard"
        ),  # standard test
    ],
)
def test_VERIFY(test_job):

    # leave the folders as they were initially to run a different batch of tests
    if os.path.exists(f"{path_verify}"):
        shutil.rmtree(f"{path_verify}")
        # remove DAT and CSV files generated by VERIFY
        dat_files = glob.glob("*.dat")
        for dat_file in dat_files:
            if "VERIFY" in dat_file:
                os.remove(dat_file)

    if test_job == 'clas': # rename folders to use in classification
        # rename the regression GENERATE folder
        filepath_reg = Path(f"{path_main}/GENERATE")
        filepath_reg.rename(f"{path_main}/GENERATE_reg")
        # rename the classification GENERATE folder
        filepath = Path(f"{path_main}/GENERATE_clas")
        filepath.rename(f"{path_main}/GENERATE")

    else: # in case the clas test fails and the ending rename doesn't happen
        if os.path.exists(f"{path_main}/GENERATE_reg"):
            # rename the classification GENERATE folder
            filepath = Path(f"{path_main}/GENERATE")
            filepath.rename(f"{path_main}/GENERATE_clas")
            # rename the regression GENERATE folder
            filepath_reg = Path(f"{path_main}/GENERATE_reg")
            filepath_reg.rename(f"{path_main}/GENERATE")

    # runs the program with the different tests
    cmd_robert = [
        "python",
        "-m",
        "robert",
        "--verify",
    ]

    if test_job == "kfold":
        cmd_robert = cmd_robert + ["--kfold", "10"]

    subprocess.run(cmd_robert)

    # check that the DAT file is created
    assert not os.path.exists(f"{path_main}/VERIFY_data.dat")
    outfile = open(f"{path_verify}/VERIFY_data.dat", "r")
    outlines = outfile.readlines()
    outfile.close()
    assert "ROBERT v" in outlines[0]
    results_line,start_reading = False,False
    for i,line in enumerate(outlines):
        if '------- Starting model with PFI filter ' in line: # focus on the PFI since there is an unclear test
            start_reading = True
        if start_reading:
            if 'Results of flawed models and sorted cross-validation:' in line:
                results_line = True
                if test_job == "clas":
                    assert "LOOCV: " in outlines[i+2]
                    assert "MCC =" in outlines[i+3]
                    assert "MCC =" in outlines[i+4]
                    assert "MCC =" in outlines[i+5]
                elif test_job == "standard":
                    assert "Original RMSE (10x 5-fold CV) 0.24 + 15% & 30% threshold = 0.28 & 0.32" in outlines[i+1]
                    assert "o y_mean: PASSED, RMSE = 0.7" in outlines[i+2]
                    assert "o y_shuffle: PASSED, RMSE = 0.86" in outlines[i+3]
                    assert "- onehot: UNCLEAR, RMSE = 0.3" in outlines[i+4]
                    assert "- Sorted 5-fold CV : R2 = [0.21, 0.81, 0.1, 0.7, 0.2], MAE = [0.54, 0.12, 0.17, 0.35, 0.39], RMSE = [0.56, 0.12, 0.18, 0.39, 0.45]" in outlines[i+5]
                break
    assert results_line

    #check that the verify plots and DAT file are created
    assert len(glob.glob(f'{path_verify}/*.png')) == 2
    assert len(glob.glob(f'{path_verify}/*.dat')) == 1

    if test_job == 'clas': # rename folders back to their original names
        # rename the classification GENERATE folder
        filepath = Path(f"{path_main}/GENERATE")
        filepath.rename(f"{path_main}/GENERATE_clas")
        # rename the regression GENERATE folder
        filepath_reg = Path(f"{path_main}/GENERATE_reg")
        filepath_reg.rename(f"{path_main}/GENERATE")